section .data

msg1 db 10,"Enter HEX number : "
msg1_len equ $-msg1

msg2 db 10,"Equivalent BCD number is : "
msg2_len equ $-msg2


emsg db 10,"Please enter correct hex number!"
emsg_len equ $-emsg


section .bss
    buf resb 5
    char_ans resb 1
    
%macro print 2
mov rax,1
mov rdi,1
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro read 2
mov rax,0
mov rdi,0
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro exit 0
mov rax,60
mov rdi,0
syscall
%endmacro

;--------------------------------
section .text
global _start

_start:

print msg1,msg1_len
call accept

print msg2,msg2_len
call display

exit

;-----------------------------
accept:
read buf,5

mov rsi,buf
xor bx,bx
mov rcx,4

next:
shl bx,4
mov al,[rsi]

cmp al,'0'
jb error
cmp al,'9'
jbe sub30

cmp al,'A'
jb error
cmp al,'F'
jbe sub37

cmp al,'a'
jb error
cmp al,'f'
jbe sub57

error:
print emsg,emsg_len
exit


sub57: sub al,20h
sub37: sub al,07h
sub30: sub al,30h

add bx,ax

inc rsi
dec rcx
jnz next

ret

;-----------------------------------
display:

mov ax,bx
mov bx,10
xor bp,bp

back:
xor dx,dx
div bx

push dx
inc bp

cmp ax,0
jne back

back2:
pop dx
add dl,30h
mov [char_ans],dl
print char_ans,1

dec bp
jnz back2

ret
;--------------------------------
