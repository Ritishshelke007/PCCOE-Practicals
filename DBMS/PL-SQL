1. Consider table Stud(Roll, Att,Status)
Write a PL/SQL block for following requirement and handle the exceptions. Roll
no. of student will be entered by user. Attendance of roll no. entered by user
will be checked in Stud table. If attendance is less than 75% then display the
message “Term not granted” and set the status in stud table as “D”. Otherwise
display message “Term granted” and set the status in stud table as “ND”

PL/SQL BLOCK
declare
roll_no number(5);
att number(3);
begin
roll_no:=&roll_no;
select attendance into att from stud where roll=roll_no;
IF att<75 THEN
dbms_output.put_line('Term Not Granted');
update stud set status='D' where roll=roll_no;
ELSE
dbms_output.put_line('Term Granted');
update stud set status='ND' where roll=roll_no;
END IF;
Exception
WHEN no_data_found THEN
dbms_output.put_line(roll_no||'Student not found');
End;

2. Write a PL/SQL block for following requirement using user defined exception
handling. The account_master table records the current balance for an
account, which is updated whenever,any deposits or withdrawals takes place. If
the withdrawal attempted is more than the current balance held in the
account. The user defined exception is raised, displaying an appropriate
message. Write a PL/SQL block for above requirement using user defined
exception handling.

PL/SQL BLOCK
declare
macc_no number(5);
mbalance float;
mamount float;
insuffiecient_balance exception;
begin
macc_no:=&macc_no;
mamount:=&mamount;
select balance into mbalance from account_master where acc_no=macc_no;
if (mamount<=mbalance) then
Dbms_output.put_line('Withdraw Success | Balance updated');
update account_master set balance=(balance-mamount) where
acc_no=macc_no;
else
raise insuffiecient_balance;
end if;
exception
when insuffiecient_balance then
dbms_output.put_line('Withdraw failed,Insuffiecient balance');
when no_data_found then
dbms_output.put_line('Account does not exist');
end;

3...
PL/SQL BLOCK
declare
mroll number(5);
name_of_book varchar(50);
issue_date date;
no_of_days number(5);
today_date date;
fine_amt number(5);
begin
-- step 1 : accept input
mroll:=&mroll;
name_of_book:='&name_of_book';
select date_of_issue into issue_date from borrower where roll_no=mroll and
book_name=name_of_book;
dbms_output.put_line('issue date is '||issue_date);
select sysdate into today_date from dual;
dbms_output.put_line('Today date is '||today_date);
no_of_days:=trunc(today_date)-issue_date;
dbms_output.put_line('No of days is '||no_of_days);
-- step 2 calculate fine amount
 IF no_of_days > 30 THEN
 fine_amt := 75 + 50 * (no_of_days - 30);
 ELSIF no_of_days > 15 THEN
 fine_amt := 5 * (no_of_days - 15);
 ELSE
 fine_amt := 0;
 END IF;
dbms_output.put_line('Fine '||fine_amt);
-- step 3 change status
update borrower set status='R' where roll_no=mroll;
-- step 4 if fine applicable insert into fine table
IF fine_amt > 0 THEN
insert into fine (roll_no,f_date,amt) values (mroll,today_date,fine_amt);
END IF;
end;
